
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.8.2
 * Query Engine version: 2060c79ba17c6bb9f5823312b6f6b7f4a845738e
 */
Prisma.prismaVersion = {
  client: "6.8.2",
  engine: "2060c79ba17c6bb9f5823312b6f6b7f4a845738e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.ClientesScalarFieldEnum = {
  id_cliente: 'id_cliente',
  nombre: 'nombre',
  cedula: 'cedula',
  telefono: 'telefono',
  email: 'email',
  foto_url: 'foto_url',
  notas: 'notas',
  referido_por: 'referido_por',
  fecha_registro: 'fecha_registro',
  apellido: 'apellido'
};

exports.Prisma.CuotasScalarFieldEnum = {
  id_cuota: 'id_cuota',
  id_prestamo: 'id_prestamo',
  numero: 'numero',
  fecha_prevista: 'fecha_prevista',
  monto_capital: 'monto_capital',
  monto_interes: 'monto_interes',
  monto: 'monto',
  monto_restante: 'monto_restante',
  intereses_mora: 'intereses_mora',
  estado_pago: 'estado_pago',
  fecha_actualizacion: 'fecha_actualizacion'
};

exports.Prisma.LogactividadScalarFieldEnum = {
  id_log: 'id_log',
  id_usuario: 'id_usuario',
  accion: 'accion',
  fecha_hora: 'fecha_hora'
};

exports.Prisma.MovimientoscajaScalarFieldEnum = {
  id_movimiento: 'id_movimiento',
  tipo: 'tipo',
  prestamo_id: 'prestamo_id',
  pago_id: 'pago_id',
  descripcion: 'descripcion',
  monto: 'monto',
  fecha: 'fecha',
  usuario_id: 'usuario_id'
};

exports.Prisma.PagosScalarFieldEnum = {
  id_pago: 'id_pago',
  id_cuota: 'id_cuota',
  fecha_pago: 'fecha_pago',
  monto_pagado: 'monto_pagado',
  forma_pago: 'forma_pago',
  recibo_numero: 'recibo_numero',
  cobrador_id: 'cobrador_id',
  observaciones: 'observaciones'
};

exports.Prisma.PrestamosScalarFieldEnum = {
  id_prestamo: 'id_prestamo',
  id_cliente: 'id_cliente',
  monto: 'monto',
  interes: 'interes',
  total_pagado: 'total_pagado',
  tipo_interes: 'tipo_interes',
  id_usuario: 'id_usuario',
  cant_cuotas: 'cant_cuotas',
  frecuencia_pago: 'frecuencia_pago',
  fecha_inicio: 'fecha_inicio',
  fecha_vencimiento: 'fecha_vencimiento',
  estado: 'estado',
  notas: 'notas'
};

exports.Prisma.UsuariosScalarFieldEnum = {
  id_usuario: 'id_usuario',
  nombre_usuario: 'nombre_usuario',
  clave_hash: 'clave_hash',
  rol: 'rol',
  fecha_creacion: 'fecha_creacion',
  ultimo_acceso: 'ultimo_acceso',
  fecha_baja: 'fecha_baja',
  razon_baja: 'razon_baja',
  estado: 'estado',
  nombre: 'nombre',
  apellido: 'apellido'
};

exports.Prisma.DireccionesScalarFieldEnum = {
  id: 'id',
  id_cliente: 'id_cliente',
  latitud: 'latitud',
  longitud: 'longitud',
  desripcion: 'desripcion'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.estado_cuota = exports.$Enums.estado_cuota = {
  pendiente: 'pendiente',
  pagada: 'pagada',
  atrasada: 'atrasada',
  parcial: 'parcial'
};

exports.tipo_movimiento = exports.$Enums.tipo_movimiento = {
  entrada: 'entrada',
  salida: 'salida'
};

exports.forma_pago = exports.$Enums.forma_pago = {
  efectivo: 'efectivo',
  transferencia: 'transferencia',
  otro: 'otro'
};

exports.tipo_interes = exports.$Enums.tipo_interes = {
  simple: 'simple',
  compuesto: 'compuesto'
};

exports.frecuencia_pago = exports.$Enums.frecuencia_pago = {
  diario: 'diario',
  semanal: 'semanal',
  quincenal: 'quincenal',
  mensual: 'mensual'
};

exports.estado_prestamo = exports.$Enums.estado_prestamo = {
  activo: 'activo',
  finalizado: 'finalizado',
  mora: 'mora'
};

exports.rol = exports.$Enums.rol = {
  admin: 'admin',
  cobrador: 'cobrador',
  secretario: 'secretario'
};

exports.estado_usuario = exports.$Enums.estado_usuario = {
  activo: 'activo',
  inactivo: 'inactivo'
};

exports.Prisma.ModelName = {
  clientes: 'clientes',
  cuotas: 'cuotas',
  logactividad: 'logactividad',
  movimientoscaja: 'movimientoscaja',
  pagos: 'pagos',
  prestamos: 'prestamos',
  usuarios: 'usuarios',
  direcciones: 'direcciones'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
